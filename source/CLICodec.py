# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import os
import sys
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, f"{CURRENT_PATH}/libs")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import CLICodec
else:
    import CLICodec

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CLICodec')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CLICodec')
    _CLICodec = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CLICodec', [dirname(__file__)])
        except ImportError:
            import _CLICodec
            return _CLICodec
        try:
            _mod = imp.load_module('_CLICodec', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CLICodec = swig_import_helper()
    del swig_import_helper
else:
    import _CLICodec
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class MediaPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaPath, name)
    __repr__ = _swig_repr

    def __init__(self, path, capacity):
        this = _CLICodec.new_MediaPath(path, capacity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def path(self):
        return _CLICodec.MediaPath_path(self)

    def capacity(self):
        return _CLICodec.MediaPath_capacity(self)
    __swig_destroy__ = _CLICodec.delete_MediaPath
    __del__ = lambda self: None
MediaPath_swigregister = _CLICodec.MediaPath_swigregister
MediaPath_swigregister(MediaPath)

class MediaPaths(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaPaths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaPaths, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _CLICodec.MediaPaths_size(self)

    def getRandom(self):
        return _CLICodec.MediaPaths_getRandom(self)

    def isGood(self):
        return _CLICodec.MediaPaths_isGood(self)
    __swig_destroy__ = _CLICodec.delete_MediaPaths
    __del__ = lambda self: None
MediaPaths_swigregister = _CLICodec.MediaPaths_swigregister
MediaPaths_swigregister(MediaPaths)

class CLICodec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLICodec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLICodec, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _CLICodec.delete_CLICodec
    __del__ = lambda self: None
    if _newclass:
        ipv4FromHost = staticmethod(_CLICodec.CLICodec_ipv4FromHost)
    else:
        ipv4FromHost = _CLICodec.CLICodec_ipv4FromHost
    if _newclass:
        makeSecret = staticmethod(_CLICodec.CLICodec_makeSecret)
    else:
        makeSecret = _CLICodec.CLICodec_makeSecret
    if _newclass:
        SetCodecsSpec = staticmethod(_CLICodec.CLICodec_SetCodecsSpec)
    else:
        SetCodecsSpec = _CLICodec.CLICodec_SetCodecsSpec
    if _newclass:
        GetCodecNames = staticmethod(_CLICodec.CLICodec_GetCodecNames)
    else:
        GetCodecNames = _CLICodec.CLICodec_GetCodecNames
    if _newclass:
        GetNamedCodec = staticmethod(_CLICodec.CLICodec_GetNamedCodec)
    else:
        GetNamedCodec = _CLICodec.CLICodec_GetNamedCodec
    if _newclass:
        GetCodecFromSpec = staticmethod(_CLICodec.CLICodec_GetCodecFromSpec)
    else:
        GetCodecFromSpec = _CLICodec.CLICodec_GetCodecFromSpec

    def getRandomMedia(self):
        return _CLICodec.CLICodec_getRandomMedia(self)

    def encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr=None):
        return _CLICodec.CLICodec_encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr)

    def decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut):
        return _CLICodec.CLICodec_decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut)

    def setSecret(self, *args):
        return _CLICodec.CLICodec_setSecret(self, *args)

    def isGood(self):
        return _CLICodec.CLICodec_isGood(self)
CLICodec_swigregister = _CLICodec.CLICodec_swigregister
CLICodec_swigregister(CLICodec)

def CLICodec_ipv4FromHost(ipStr):
    return _CLICodec.CLICodec_ipv4FromHost(ipStr)
CLICodec_ipv4FromHost = _CLICodec.CLICodec_ipv4FromHost

def CLICodec_makeSecret(ip1, ip2):
    return _CLICodec.CLICodec_makeSecret(ip1, ip2)
CLICodec_makeSecret = _CLICodec.CLICodec_makeSecret

def CLICodec_SetCodecsSpec(codecsSpec):
    return _CLICodec.CLICodec_SetCodecsSpec(codecsSpec)
CLICodec_SetCodecsSpec = _CLICodec.CLICodec_SetCodecsSpec

def CLICodec_GetCodecNames():
    return _CLICodec.CLICodec_GetCodecNames()
CLICodec_GetCodecNames = _CLICodec.CLICodec_GetCodecNames

def CLICodec_GetNamedCodec(codecName):
    return _CLICodec.CLICodec_GetNamedCodec(codecName)
CLICodec_GetNamedCodec = _CLICodec.CLICodec_GetNamedCodec

def CLICodec_GetCodecFromSpec(jsonSpec):
    return _CLICodec.CLICodec_GetCodecFromSpec(jsonSpec)
CLICodec_GetCodecFromSpec = _CLICodec.CLICodec_GetCodecFromSpec

# This file is compatible with both classic and new-style classes.


