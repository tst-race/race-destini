# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import os
import sys
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, f"{CURRENT_PATH}/libs")


from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import IOManager_lib
else:
    import IOManager_lib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = IOManager_lib.delete_SwigPyIterator

    def value(self):
        return IOManager_lib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return IOManager_lib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return IOManager_lib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return IOManager_lib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return IOManager_lib.SwigPyIterator_equal(self, x)

    def copy(self):
        return IOManager_lib.SwigPyIterator_copy(self)

    def next(self):
        return IOManager_lib.SwigPyIterator_next(self)

    def __next__(self):
        return IOManager_lib.SwigPyIterator___next__(self)

    def previous(self):
        return IOManager_lib.SwigPyIterator_previous(self)

    def advance(self, n):
        return IOManager_lib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return IOManager_lib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return IOManager_lib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return IOManager_lib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return IOManager_lib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return IOManager_lib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return IOManager_lib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IOManager:
IOManager_lib.SwigPyIterator_swigregister(SwigPyIterator)

IOM_WHOLE_MSG = IOManager_lib.IOM_WHOLE_MSG
IOM_PARTIAL_MSG = IOManager_lib.IOM_PARTIAL_MSG
IOM_OUT_OF_MEM = IOManager_lib.IOM_OUT_OF_MEM
IOM_NOT_SEGMENT = IOManager_lib.IOM_NOT_SEGMENT
IOM_DUP_SEGMENT = IOManager_lib.IOM_DUP_SEGMENT
IOM_BAD_SEG_IDX = IOManager_lib.IOM_BAD_SEG_IDX
IOM_BAD_NUM_SEG = IOManager_lib.IOM_BAD_NUM_SEG
IOM_EXPIRED_SEG = IOManager_lib.IOM_EXPIRED_SEG
IOM_NO_SENDER = IOManager_lib.IOM_NO_SENDER
IOM_NO_CODEC = IOManager_lib.IOM_NO_CODEC
IOM_PRFX_MAGIC = IOManager_lib.IOM_PRFX_MAGIC
IOM_PRFX_IS_SRC = IOManager_lib.IOM_PRFX_IS_SRC
IOM_PRFX_BRDCST = IOManager_lib.IOM_PRFX_BRDCST
IOM_PRFX_X_DST = IOManager_lib.IOM_PRFX_X_DST
IOM_PREF_X_CHK = IOManager_lib.IOM_PREF_X_CHK
IOM_PREF_X_LEN = IOManager_lib.IOM_PREF_X_LEN
IOM_CT_ORDERED = IOManager_lib.IOM_CT_ORDERED
IOM_CT_GENERAL = IOManager_lib.IOM_CT_GENERAL
IOM_CT_AVIDEO = IOManager_lib.IOM_CT_AVIDEO
IOM_CT_D_SVR = IOManager_lib.IOM_CT_D_SVR
IOM_MT_CT_COPY = IOManager_lib.IOM_MT_CT_COPY
IOM_MT_GENERAL = IOManager_lib.IOM_MT_GENERAL
IOM_MT_AVIDEO = IOManager_lib.IOM_MT_AVIDEO
IOM_MT_D_SVR = IOManager_lib.IOM_MT_D_SVR
class MessageWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        IOManager_lib.MessageWrapper_swiginit(self, IOManager_lib.new_MessageWrapper())
    __swig_destroy__ = IOManager_lib.delete_MessageWrapper

    @staticmethod
    def WrappedSize(nData):
        return IOManager_lib.MessageWrapper_WrappedSize(nData)

    def wrap(self, *args):
        return IOManager_lib.MessageWrapper_wrap(self, *args)

    def close(self, pData=None, nData=None):
        return IOManager_lib.MessageWrapper_close(self, pData, nData)

# Register MessageWrapper in _IOManager:
IOManager_lib.MessageWrapper_swigregister(MessageWrapper)

def MessageWrapper_WrappedSize(nData):
    return IOManager_lib.MessageWrapper_WrappedSize(nData)

class IOManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddChannel(cType):
        return IOManager_lib.IOManager_AddChannel(cType)

    @staticmethod
    def MakeCodecs(*args):
        return IOManager_lib.IOManager_MakeCodecs(*args)

    @staticmethod
    def GetFromCodec(*args):
        return IOManager_lib.IOManager_GetFromCodec(*args)

    @staticmethod
    def GetToCodec(*args):
        return IOManager_lib.IOManager_GetToCodec(*args)

    @staticmethod
    def SetHostIP(*args):
        return IOManager_lib.IOManager_SetHostIP(*args)

    @staticmethod
    def SetProcessMsg(*args):
        return IOManager_lib.IOManager_SetProcessMsg(*args)

    @staticmethod
    def SetSendMsg(*args):
        return IOManager_lib.IOManager_SetSendMsg(*args)

    @staticmethod
    def SetBroadcastHost(broadcastHost, broadcastSeed=0):
        return IOManager_lib.IOManager_SetBroadcastHost(broadcastHost, broadcastSeed)

    @staticmethod
    def SetBroadcastIP(broadcastIP, broadcastSeed=0):
        return IOManager_lib.IOManager_SetBroadcastIP(broadcastIP, broadcastSeed)

    @staticmethod
    def GetBroadcastIPs():
        return IOManager_lib.IOManager_GetBroadcastIPs()

    @staticmethod
    def Examine(pMsgIn, cType, fromIP, refcon):
        return IOManager_lib.IOManager_Examine(pMsgIn, cType, fromIP, refcon)

    @staticmethod
    def Send(*args):
        return IOManager_lib.IOManager_Send(*args)

    @staticmethod
    def Broadcast(*args):
        return IOManager_lib.IOManager_Broadcast(*args)

    @staticmethod
    def SetDuration(duration):
        return IOManager_lib.IOManager_SetDuration(duration)

    @staticmethod
    def CleanUp():
        return IOManager_lib.IOManager_CleanUp()

    def __init__(self):
        IOManager_lib.IOManager_swiginit(self, IOManager_lib.new_IOManager())
    __swig_destroy__ = IOManager_lib.delete_IOManager

# Register IOManager in _IOManager:
IOManager_lib.IOManager_swigregister(IOManager)

def IOManager_AddChannel(cType):
    return IOManager_lib.IOManager_AddChannel(cType)

def IOManager_MakeCodecs(*args):
    return IOManager_lib.IOManager_MakeCodecs(*args)

def IOManager_GetFromCodec(*args):
    return IOManager_lib.IOManager_GetFromCodec(*args)

def IOManager_GetToCodec(*args):
    return IOManager_lib.IOManager_GetToCodec(*args)

def IOManager_SetHostIP(*args):
    return IOManager_lib.IOManager_SetHostIP(*args)

def IOManager_SetProcessMsg(*args):
    return IOManager_lib.IOManager_SetProcessMsg(*args)

def IOManager_SetSendMsg(*args):
    return IOManager_lib.IOManager_SetSendMsg(*args)

def IOManager_SetBroadcastHost(broadcastHost, broadcastSeed=0):
    return IOManager_lib.IOManager_SetBroadcastHost(broadcastHost, broadcastSeed)

def IOManager_SetBroadcastIP(broadcastIP, broadcastSeed=0):
    return IOManager_lib.IOManager_SetBroadcastIP(broadcastIP, broadcastSeed)

def IOManager_GetBroadcastIPs():
    return IOManager_lib.IOManager_GetBroadcastIPs()

def IOManager_Examine(pMsgIn, cType, fromIP, refcon):
    return IOManager_lib.IOManager_Examine(pMsgIn, cType, fromIP, refcon)

def IOManager_Send(*args):
    return IOManager_lib.IOManager_Send(*args)

def IOManager_Broadcast(*args):
    return IOManager_lib.IOManager_Broadcast(*args)

def IOManager_SetDuration(duration):
    return IOManager_lib.IOManager_SetDuration(duration)

def IOManager_CleanUp():
    return IOManager_lib.IOManager_CleanUp()

class MediaPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path, capacity):
        IOManager_lib.MediaPath_swiginit(self, IOManager_lib.new_MediaPath(path, capacity))

    def path(self):
        return IOManager_lib.MediaPath_path(self)

    def capacity(self):
        return IOManager_lib.MediaPath_capacity(self)
    __swig_destroy__ = IOManager_lib.delete_MediaPath

# Register MediaPath in _IOManager:
IOManager_lib.MediaPath_swigregister(MediaPath)

class MediaPaths(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return IOManager_lib.MediaPaths_size(self)

    def getRandom(self):
        return IOManager_lib.MediaPaths_getRandom(self)

    def isGood(self):
        return IOManager_lib.MediaPaths_isGood(self)
    __swig_destroy__ = IOManager_lib.delete_MediaPaths

# Register MediaPaths in _IOManager:
IOManager_lib.MediaPaths_swigregister(MediaPaths)

class CLICodec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = IOManager_lib.delete_CLICodec

    @staticmethod
    def ipv4FromHost(ipStr):
        return IOManager_lib.CLICodec_ipv4FromHost(ipStr)

    @staticmethod
    def makeSecret(ip1, ip2):
        return IOManager_lib.CLICodec_makeSecret(ip1, ip2)

    @staticmethod
    def SetCodecsSpec(codecsSpec):
        return IOManager_lib.CLICodec_SetCodecsSpec(codecsSpec)

    @staticmethod
    def GetCodecNames():
        return IOManager_lib.CLICodec_GetCodecNames()

    @staticmethod
    def GetNamedCodec(codecName):
        return IOManager_lib.CLICodec_GetNamedCodec(codecName)

    @staticmethod
    def GetCodecFromSpec(jsonSpec):
        return IOManager_lib.CLICodec_GetCodecFromSpec(jsonSpec)

    def getRandomMedia(self):
        return IOManager_lib.CLICodec_getRandomMedia(self)

    def encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr=None):
        return IOManager_lib.CLICodec_encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr)

    def decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut):
        return IOManager_lib.CLICodec_decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut)

    def setSecret(self, *args):
        return IOManager_lib.CLICodec_setSecret(self, *args)

    def isGood(self):
        return IOManager_lib.CLICodec_isGood(self)

# Register CLICodec in _IOManager:
IOManager_lib.CLICodec_swigregister(CLICodec)

def CLICodec_ipv4FromHost(ipStr):
    return IOManager_lib.CLICodec_ipv4FromHost(ipStr)

def CLICodec_makeSecret(ip1, ip2):
    return IOManager_lib.CLICodec_makeSecret(ip1, ip2)

def CLICodec_SetCodecsSpec(codecsSpec):
    return IOManager_lib.CLICodec_SetCodecsSpec(codecsSpec)

def CLICodec_GetCodecNames():
    return IOManager_lib.CLICodec_GetCodecNames()

def CLICodec_GetNamedCodec(codecName):
    return IOManager_lib.CLICodec_GetNamedCodec(codecName)

def CLICodec_GetCodecFromSpec(jsonSpec):
    return IOManager_lib.CLICodec_GetCodecFromSpec(jsonSpec)


def SetDiagPrint(func):
    return IOManager_lib.SetDiagPrint(func)


