# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import os
import sys
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, f"{CURRENT_PATH}/libs")


from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import CLICodec_lib
else:
    import CLICodec_lib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MediaPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path, capacity):
        CLICodec_lib.MediaPath_swiginit(self, _CLICodec.new_MediaPath(path, capacity))

    def path(self):
        return CLICodec_lib.MediaPath_path(self)

    def capacity(self):
        return CLICodec_lib.MediaPath_capacity(self)
    __swig_destroy__ = CLICodec_lib.delete_MediaPath

# Register MediaPath in _CLICodec:
CLICodec_lib.MediaPath_swigregister(MediaPath)

class MediaPaths(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return CLICodec_lib.MediaPaths_size(self)

    def getRandom(self):
        return CLICodec_lib.MediaPaths_getRandom(self)

    def isGood(self):
        return CLICodec_lib.MediaPaths_isGood(self)
    __swig_destroy__ = CLICodec_lib.delete_MediaPaths

# Register MediaPaths in _CLICodec:
CLICodec_lib.MediaPaths_swigregister(MediaPaths)

class CLICodec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = CLICodec_lib.delete_CLICodec

    @staticmethod
    def ipv4FromHost(ipStr):
        return CLICodec_lib.CLICodec_ipv4FromHost(ipStr)

    @staticmethod
    def makeSecret(ip1, ip2):
        return CLICodec_lib.CLICodec_makeSecret(ip1, ip2)

    @staticmethod
    def SetCodecsSpec(codecsSpec):
        return CLICodec_lib.CLICodec_SetCodecsSpec(codecsSpec)

    @staticmethod
    def GetCodecNames():
        return CLICodec_lib.CLICodec_GetCodecNames()

    @staticmethod
    def GetNamedCodec(codecName):
        return CLICodec_lib.CLICodec_GetNamedCodec(codecName)

    @staticmethod
    def GetCodecFromSpec(jsonSpec):
        return CLICodec_lib.CLICodec_GetCodecFromSpec(jsonSpec)

    def getRandomMedia(self):
        return CLICodec_lib.CLICodec_getRandomMedia(self)

    def encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr=None):
        return CLICodec_lib.CLICodec_encode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut, mediaPtr)

    def decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut):
        return CLICodec_lib.CLICodec_decode(self, pMsgIn, nMsgIn, pMsgOut, nMsgOut)

    def setSecret(self, *args):
        return CLICodec_lib.CLICodec_setSecret(self, *args)

    def isGood(self):
        return CLICodec_lib.CLICodec_isGood(self)

# Register CLICodec in _CLICodec:
CLICodec_lib.CLICodec_swigregister(CLICodec)

def CLICodec_ipv4FromHost(ipStr):
    return CLICodec_lib.CLICodec_ipv4FromHost(ipStr)

def CLICodec_makeSecret(ip1, ip2):
    return CLICodec_lib.CLICodec_makeSecret(ip1, ip2)

def CLICodec_SetCodecsSpec(codecsSpec):
    return CLICodec_lib.CLICodec_SetCodecsSpec(codecsSpec)

def CLICodec_GetCodecNames():
    return CLICodec_lib.CLICodec_GetCodecNames()

def CLICodec_GetNamedCodec(codecName):
    return CLICodec_lib.CLICodec_GetNamedCodec(codecName)

def CLICodec_GetCodecFromSpec(jsonSpec):
    return CLICodec_lib.CLICodec_GetCodecFromSpec(jsonSpec)



